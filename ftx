#1.Application Properties

spring.application.name=pms-restapi

    server.port=8084
    server.servlet.context-path=/pms

    spring.datasource.url=jdbc:mysql://localhost:3306/productrestdb
    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    spring.datasource.username=root
    spring.datasource.password=root

    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.show-sql=true

    logging.level.root=WARN


#2.Product.java-Model

package com.cdac.training.pms.model;

import jakarta.persistence.*;

/**
 * 
 * @author rajgs
 * 
 * Spring Boot JPA with Hibernate
 * 
 * Spring Boot JPA is a Java specification for managing relational data in Java applications. 
 * It allows us to access and persist data between Java object/ class and relational database. 
 * JPA follows Object-Relation Mapping (ORM). It is a set of interfaces. 
 * It also provides a runtime EntityManager API for processing queries and transactions on the objects 
 * against the database. 
 * It uses a platform-independent object-oriented query language JPQL (Java Persistent Query Language).
 * JPA is implemented with Annotations
 */
/* The @Entity annotation specifies that the class is an entity and is mapped to a database table.*/
@Entity
public class Product {
	
	/*The @Id annotation specifies the primary key of an entity and the @GeneratedValue provides for 
	 * the specification of generation strategies for the values of primary keys. */
	@SequenceGenerator(name="product_seq", initialValue = 1000, allocationSize = 1) 
	@Id
	 @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "product_seq")
	 private Long pid;

     private String name;
     private String brand;
     @Column(nullable = false)
     private String madein;
     
    
     private float price;


	public Product() {
		// TODO Auto-generated constructor stub
	}


	


	public Product(Long pid, String name, String brand, String madein, float price) {
		super();
		this.pid = pid;
		this.name = name;
		this.brand = brand;
		this.madein = madein;
		this.price = price;
	}

	public Long getPid() {
		return pid;
	}
	public void setPid(Long pid) {
		this.pid = pid;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getBrand() {
		return brand;
	}
	public void setBrand(String brand) {
		this.brand = brand;
	}
	public String getMadein() {
		return madein;
	}
	public void setMadein(String madein) {
		this.madein = madein;
	}
	public float getPrice() {
		return price;
	}
	public void setPrice(float price) {
		this.price = price;
	}
}


#3.ProductRepository-Repository

package com.cdac.training.pms.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.cdac.training.pms.model.Product;

public interface ProductRepository extends JpaRepository<Product, Long> {
	
	@Query("SELECT p FROM Product p WHERE LOWER(REPLACE(p.name, ' ', '')) LIKE "
			+ "LOWER(CONCAT(REPLACE(:name, ' ', ''), '%'))")
	List<Product> findProductsByNameContainingIgnoreCase(@Param("name") String name);
}



#4.ProductService-Service

package com.cdac.training.pms.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cdac.training.pms.model.Product;
import com.cdac.training.pms.repository.ProductRepository;

@Service
public class ProductService {
	
	@Autowired
	private ProductRepository prepo;
	
	public Product saveProduct(Product p) {
		return prepo.save(p);   
	}
	
	 public List<Product> listAll(){
 		
 		return prepo.findAll(); //Defined in JPA repo.
 	}
	 
	public Optional<Product> getSingleProduct(long id){
		return prepo.findById(id); 
	}
	
	public void deleteProduct(long id) {
		 prepo.deleteById(id); 
	}
	
	public List<Product> searchProductsByName(String name) {
        return prepo.findProductsByNameContainingIgnoreCase(name);
    }

}


#5.ResourceNotFoundException

package com.cdac.training.pms.exception;

public class ResourceNotFoundException extends Exception {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public ResourceNotFoundException(String message) {
		super(message);
		
	}
}


#6.ProductController

package com.cdac.training.pms.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cdac.training.pms.exception.ResourceNotFoundException;
import com.cdac.training.pms.model.Product;
import com.cdac.training.pms.service.ProductService;

@CrossOrigin(origins="http://localhost:3000")
@RestController
@RequestMapping(value="/api") 
public class ProductController {
	
	@Autowired
	private ProductService pservice;
	@PostMapping("/products")
	public ResponseEntity<Product> saveProduct(@Validated @RequestBody Product product) {
		try {
				Product p=pservice.saveProduct(product);
				return ResponseEntity.status(HttpStatus.CREATED).body(p);
		}
		catch(Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
		}
	}
		//Open PostMan, make a GET Request - http://localhost:8085/pms/api/products
		@GetMapping("/products")
		public ResponseEntity<List<Product>> getAllProducts(){
			try {
				List<Product> products= pservice.listAll();
				return ResponseEntity.ok(products);
			}
			catch(Exception e) {
				e.printStackTrace();
				return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
			}
		}
		
		//Open PostMan, make a GET Request - http://localhost:8085/pms/api/products/4
		//                                   http://localhost:8085/pms/api/products/1002
		
		@GetMapping("/products/{id}")
		public ResponseEntity<Product> getProductById(@PathVariable(value="id") Long pId)
					throws ResourceNotFoundException {
				Product p=pservice.getSingleProduct(pId).
						orElseThrow(() -> new ResourceNotFoundException("Product Not Found for this Id :"+pId));
				
				return ResponseEntity.ok().body(p);
		}
		
		//Open PostMan, make a PUT Request - http://localhost:8085/pms/api/products/1002
	    		
		@PutMapping("/products/{id}")
		public ResponseEntity<Product> updateProduct(@PathVariable(value="id") Long pId,
				@Validated @RequestBody Product p) throws ResourceNotFoundException {
			
			Product product=pservice.getSingleProduct(pId).
					orElseThrow(() -> new ResourceNotFoundException("Product Not Found for this Id :"+pId));
			//Update product with new values
			product.setBrand(p.getBrand());
			product.setMadein(p.getMadein());
			product.setName(p.getName());
			product.setPrice(p.getPrice());
			
			final Product updatedProduct=pservice.saveProduct(product);
			return ResponseEntity.ok().body(updatedProduct);
	}
		
		//Open PostMan, make a DELETE Request - http://localhost:8085/pms/api/products/3
		@DeleteMapping("/products/{id}")
		public ResponseEntity<Map<String,Boolean>> deleteProduct(@PathVariable(value="id") Long pId)
				throws ResourceNotFoundException{
			
			pservice.getSingleProduct(pId).
			orElseThrow(() -> new ResourceNotFoundException("Product Not found for thid Id :"+pId));
			
			pservice.deleteProduct(pId);
			
			Map<String,Boolean> response=new HashMap<String, Boolean>();
			response.put("Deleted", Boolean.TRUE);
			return ResponseEntity.ok(response);
		}
		
		//Open PostMan, make a GET Request - http://localhost:8085/pms/api/search?name=pendrive
		@GetMapping("/products/search")
	    public ResponseEntity<?> searchProductsByName(@RequestParam("name") String name) {
	        try {
	            List<Product> products = pservice.searchProductsByName(name);
	            
	            if (products.isEmpty()) {
	                return new ResponseEntity<>("No products found with the given name.", HttpStatus.NOT_FOUND);
	            }
	            
	            return new ResponseEntity<>(products, HttpStatus.OK);
	        } catch (Exception ex) {
	        	//database error
	            return new ResponseEntity<>("An error occurred while searching for products.", HttpStatus.INTERNAL_SERVER_ERROR);
	        }
	    }
	
	
}
